{"version":3,"sources":["components/Note.js","components/Notification.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","props","message","baseUrl","noteService","getAll","axios","get","then","response","data","create","newObject","post","update","id","put","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","initialNotes","console","log","length","notesToShow","filter","map","find","changedNote","returnedNote","catch","err","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"4KAYeA,EAVF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UAAY,qBAAuB,iBACtD,OACE,qBAAIC,UAAU,OAAd,UACCJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,QCKzBK,EAVM,SAACC,GAClB,OAAqB,OAAlBA,EAAMC,QACE,KAGP,qBAAKL,UAAU,QAAf,SACCI,EAAMC,W,gBCPTC,EAAU,aAkCDC,EANK,CAChBC,OA3BW,WAGX,OAAOC,IAAMC,IAAIJ,GAASK,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAyBpDC,OAtBW,SAACC,GAGZ,OAAON,IAAMO,KAAKV,EAASS,GAAWJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAoBhEI,OAjBW,SAACC,EAAIH,GAGhB,OAAON,IAAMU,IAAN,UAAab,EAAb,YAAwBY,GAAMH,GAAWJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UCZxEO,EAAS,WAMb,OACE,sBAAKC,MANW,CAChBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAGV,UACA,uBACA,uBACA,4GA+HWC,EA1HH,WACV,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAwCN,mBAAS,MAAjD,mBAAOO,EAAP,KAAqBC,EAArB,KAYAC,qBAAU,WACR5B,EACCC,SACAG,MAAK,SAAAyB,GACJR,EAASQ,QAEV,IAEHC,QAAQC,IAAI,SAAUX,EAAMY,OAAQ,SAEpC,IAiEMC,EAAcT,EAClBJ,EACAA,EAAMc,QAAO,SAAA7C,GAAI,OAAIA,EAAKG,aAE5B,OACE,gCACE,uCACA,cAAC,EAAD,CAAcM,QAAS4B,IACvB,8BACE,yBAAQ/B,QAAS,kBAAM8B,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAGlC,6BACGS,EAAYE,KAAI,SAAA9C,GAAI,OACjB,cAAC,EAAD,CAAoBA,KAAMA,EAAMC,iBAAkB,kBAjDjC,SAACqB,GAE1B,IAAMtB,EAAO+B,EAAMgB,MAAK,SAAA/C,GAAI,OAAIA,EAAKsB,KAAOA,KACtC0B,EAAW,2BAAOhD,GAAP,IAAaG,WAAYH,EAAKG,YAO/CQ,EACCU,OAAOC,EAAI0B,GACXjC,MAAK,SAAAkC,GACJjB,EAASD,EAAMe,KAAI,SAAA9C,GAAI,OAAIA,EAAKsB,KAAOA,EAAKtB,EAAMiD,SAEnDC,OAAM,SAAAC,GACLb,EAAgB,SAAD,OAAUtC,EAAKK,QAAf,sCACf+C,YAAW,WAAOd,EAAgB,QAAQ,KAC1CN,EAASD,EAAMc,QAAO,SAAA7C,GAAI,OAAIA,EAAKsB,KAAOA,SA+BoB+B,CAAmBrD,EAAKsB,MAArEtB,EAAKsB,SAItB,uBAAMgC,SApFM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBpD,QAAS4B,EACTyB,MAAM,IAAIC,MAAOC,cACjBzD,UAAW0D,KAAKC,SAAW,IAW7BnD,EACCO,OAAOuC,GACP1C,MAAK,SAAAkB,GACJD,EAASD,EAAMgC,OAAO9B,IACtBC,EAAW,QAgEX,UACE,uBACE8B,MAAO/B,EACPgC,SA7DiB,SAACV,GACxBd,QAAQC,IAAIa,EAAMW,OAAOF,OACzB9B,EAAWqB,EAAMW,OAAOF,UA6DpB,wBAAQG,KAAK,SAAb,qBAEF,cAAC,EAAD,Q,MCrINC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.8f3e0440.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important ? \"make not important\" : \"make important\"\n  return (\n    <li className=\"note\">\n    {note.content}\n    <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nexport default Note","import React from \"react\";\n\nconst Notification = (props)  =>{\n    if(props.message === null) {\n        return null\n    }\n    return (\n        <div className=\"error\">\n        {props.message}\n        </div>\n    )\n}\nexport default Notification","import axios from \"axios\"\nconst baseUrl = \"/api/notes\"\n\nconst getAll = () => {\n    // const request = axios.get(baseUrl)\n    // return request.then(response => response.data)\n    return axios.get(baseUrl).then(response => response.data)\n}\n\nconst create = (newObject) => {\n    // const request = axios.post(baseUrl, newObject)\n    // return request.then(response => response.data)\n    return axios.post(baseUrl, newObject).then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    // const request = axios.put(`${baseUrl}/${id}`, newObject)\n    // return request.then(response => response.data)\n    return axios.put(`${baseUrl}/${id}`, newObject).then(response => response.data)\n}\n// const url = `http://localhost:3001/notes/${id}`\n// const noteService = {\n//     getAll: getAll,\n//     create: create,\n//     update: update\n// }\n//Since the names of the kys and the assigned variables are the same, we can write the object def with more compact syntax:\n//which is a new feature introduced to JS through ES6: enbale a more compact way of defining objects using variables\n\nconst noteService = {\n    getAll,\n    create,\n    update\n}\n\nexport default noteService","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\n// import axios from 'axios'\nimport noteService from \"./services/notes\"\n\nconst Footer = () => {\n  const footStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n  return (\n    <div style={footStyle}>\n    <br />\n    <br />\n    <em>Note app, Department of Computer Science, University of Helsinki 2021 </em>\n    </div>\n  )\n}\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(false)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  // useEffect(() => {\n  //   console.log('effect')\n  //   axios\n  //     .get('http://localhost:3001/notes')\n  //     .then(response => {\n  //       console.log('promise fulfilled')\n  //       setNotes(response.data)\n  //     })\n  // }, [])\n  // console.log('render', notes.length, 'notes')\n  useEffect(() => {\n    noteService\n    .getAll()\n    .then(initialNotes => {\n      setNotes(initialNotes)\n    })\n  }, [])\n  //here initialNotes equals to response.data\n  console.log('render', notes.length, 'notes')\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      // id: notes.length + 1,\n    }\n\n    // axios\n    // .post(\"http://localhost:3001/notes\", noteObject)\n    // .then(response => {\n    //   setNotes(notes.concat(response.data))\n    //   console.log(notes)\n    //   setNewNote('')\n    // })\n    noteService\n    .create(noteObject)\n    .then(newNote => {\n      setNotes(notes.concat(newNote))\n      setNewNote('')\n    })\n\n\n  }\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  const toggleImportanceOf = (id) => {\n    // const url = `http://localhost:3001/notes/${id}`\n    const note = notes.find(note => note.id === id)\n    const changedNote = {...note, important: !note.important}\n    \n    // axios\n    // .put(url, changedNote)\n    // .then(response => {\n    //   setNotes(notes.map(note => {return note.id !== id ? note: response.data}))\n    // })\n    noteService\n    .update(id, changedNote)\n    .then(returnedNote => {\n      setNotes(notes.map(note => note.id !== id ? note: returnedNote))\n    })\n    .catch(err => {\n      setErrorMessage(`Note \"${note.content}\" was already deleted from server`)\n      setTimeout(() => {setErrorMessage(null)}, 5000)\n      setNotes(notes.filter(note => note.id !== id))\n    })\n  }\n  // (if note.id !== id is true, we simply copy the item from the old array into the new array. \n  // If the condition is false, then the note object returned by the server is added to the array instead.)\n  \n  // notes.map((note) => {\n  //   if(note.id !== id) {\n  //     return note\n  //   }\n  //   else {\n  //     return response.data\n  //   }\n  // })\n\n\n  const notesToShow = showAll\n  ? notes\n  : notes.filter(note => note.important)\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all' }\n        </button>\n      </div>   \n      <ul>\n        {notesToShow.map(note => \n            <Note key={note.id} note={note} toggleImportance={() => toggleImportanceOf(note.id)}/>\n            //toggleImportance={() => { console.log(`importance of ${note.id} needs to be toggled`)}}\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input\n          value={newNote}\n          onChange={handleNoteChange}\n        />\n        <button type=\"submit\">save</button>\n      </form> \n      <Footer /> \n    </div>\n  )\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App.js'\nimport './index.css'\n\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n\n\n\n"],"sourceRoot":""}