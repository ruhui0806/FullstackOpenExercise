{"ast":null,"code":"import blogService from '../services/blogs';\nimport { createSlice } from '@reduxjs/toolkit';\n// export const blogReducer = (state = [], action) => {\n//     switch (action.type) {\n//         case 'BLOGS':\n//             return action.payload\n//         case 'NEW_BLOG':\n//             return state.concat(action.payload)\n//         case 'UPDATE_BLOG': {\n//             // const id = action.payload.id\n//             const updatedBlog = action.payload\n//             return state.map((blog) =>\n//                 blog.id !== updatedBlog.id ? blog : updatedBlog\n//             )\n//         }\n//         default:\n//             return state\n//     }\n// }\n\nconst blogSlice = createSlice({\n  name: 'blogs',\n  initialState: [],\n  reducers: {\n    setBlogs(state, action) {\n      return action.payload;\n    },\n    appendBlog(state, action) {\n      return state.concat(action.payload);\n    },\n    updateBlog(state, action) {\n      const updatedBlog = action.payload;\n      return state.map(blog => blog.id !== updatedBlog.id ? blog : updatedBlog);\n    }\n  }\n});\nexport const {\n  setBlogs,\n  appendBlog,\n  updateBlog\n} = blogSlice.actions;\nexport default blogSlice.reducer;\nexport const initializeBlogs = () => {\n  return async dispatch => {\n    const blogs = await blogService.getAll();\n    dispatch(setBlogs(blogs));\n  };\n};\n\n// export const updateLikes = (id) => {\n//     return async (dispatch) => {\n//         const toLikeBlog = await blogService.findOne(id)\n//         const updatedBlog = { ...toLikeBlog, likes: toLikeBlog.likes + 1 }\n//         await blogService.update(updatedBlog)\n//         dispatch(updateLikeBlog(updatedBlog))\n//     }\n// }\n// blogService.update(id, changedBlog).then((returnedBlog) => {\n//             setBlogs(\n//                 blogs.map((blog) => (blog.id !== id ? blog : returnedBlog))\n//             )\n//         })","map":{"version":3,"names":["blogService","createSlice","blogSlice","name","initialState","reducers","setBlogs","state","action","payload","appendBlog","concat","updateBlog","updatedBlog","map","blog","id","actions","reducer","initializeBlogs","dispatch","blogs","getAll"],"sources":["/Users/kulta/Code/FullstackOpenExercise/part7/Bloglist/bloglist-frontend/src/reducers/blogReducer.js"],"sourcesContent":["import blogService from '../services/blogs'\nimport { createSlice } from '@reduxjs/toolkit'\n// export const blogReducer = (state = [], action) => {\n//     switch (action.type) {\n//         case 'BLOGS':\n//             return action.payload\n//         case 'NEW_BLOG':\n//             return state.concat(action.payload)\n//         case 'UPDATE_BLOG': {\n//             // const id = action.payload.id\n//             const updatedBlog = action.payload\n//             return state.map((blog) =>\n//                 blog.id !== updatedBlog.id ? blog : updatedBlog\n//             )\n//         }\n//         default:\n//             return state\n//     }\n// }\n\nconst blogSlice = createSlice({\n    name: 'blogs',\n    initialState: [],\n    reducers: {\n        setBlogs(state, action) {\n            return action.payload\n        },\n        appendBlog(state, action) {\n            return state.concat(action.payload)\n        },\n        updateBlog(state, action) {\n            const updatedBlog = action.payload\n            return state.map((blog) =>\n                blog.id !== updatedBlog.id ? blog : updatedBlog\n            )\n        },\n    },\n})\nexport const { setBlogs, appendBlog, updateBlog } = blogSlice.actions\n\nexport default blogSlice.reducer\n\nexport const initializeBlogs = () => {\n    return async (dispatch) => {\n        const blogs = await blogService.getAll()\n        dispatch(setBlogs(blogs))\n    }\n}\n\n// export const updateLikes = (id) => {\n//     return async (dispatch) => {\n//         const toLikeBlog = await blogService.findOne(id)\n//         const updatedBlog = { ...toLikeBlog, likes: toLikeBlog.likes + 1 }\n//         await blogService.update(updatedBlog)\n//         dispatch(updateLikeBlog(updatedBlog))\n//     }\n// }\n// blogService.update(id, changedBlog).then((returnedBlog) => {\n//             setBlogs(\n//                 blogs.map((blog) => (blog.id !== id ? blog : returnedBlog))\n//             )\n//         })\n"],"mappings":"AAAA,OAAOA,WAAW,MAAM,mBAAmB;AAC3C,SAASC,WAAW,QAAQ,kBAAkB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,SAAS,GAAGD,WAAW,CAAC;EAC1BE,IAAI,EAAE,OAAO;EACbC,YAAY,EAAE,EAAE;EAChBC,QAAQ,EAAE;IACNC,QAAQ,CAACC,KAAK,EAAEC,MAAM,EAAE;MACpB,OAAOA,MAAM,CAACC,OAAO;IACzB,CAAC;IACDC,UAAU,CAACH,KAAK,EAAEC,MAAM,EAAE;MACtB,OAAOD,KAAK,CAACI,MAAM,CAACH,MAAM,CAACC,OAAO,CAAC;IACvC,CAAC;IACDG,UAAU,CAACL,KAAK,EAAEC,MAAM,EAAE;MACtB,MAAMK,WAAW,GAAGL,MAAM,CAACC,OAAO;MAClC,OAAOF,KAAK,CAACO,GAAG,CAAEC,IAAI,IAClBA,IAAI,CAACC,EAAE,KAAKH,WAAW,CAACG,EAAE,GAAGD,IAAI,GAAGF,WAAW,CAClD;IACL;EACJ;AACJ,CAAC,CAAC;AACF,OAAO,MAAM;EAAEP,QAAQ;EAAEI,UAAU;EAAEE;AAAW,CAAC,GAAGV,SAAS,CAACe,OAAO;AAErE,eAAef,SAAS,CAACgB,OAAO;AAEhC,OAAO,MAAMC,eAAe,GAAG,MAAM;EACjC,OAAO,MAAOC,QAAQ,IAAK;IACvB,MAAMC,KAAK,GAAG,MAAMrB,WAAW,CAACsB,MAAM,EAAE;IACxCF,QAAQ,CAACd,QAAQ,CAACe,KAAK,CAAC,CAAC;EAC7B,CAAC;AACL,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}