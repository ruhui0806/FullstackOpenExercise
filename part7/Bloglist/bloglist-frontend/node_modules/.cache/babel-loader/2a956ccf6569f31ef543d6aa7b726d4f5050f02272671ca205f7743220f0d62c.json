{"ast":null,"code":"// const [blogs, setBlogs] = useState([])\n\nimport blogService from '../services/blogs';\nimport { addLike, setBlogs } from '../actions';\nexport const blogReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case 'BLOGS':\n      return action.payload;\n    case 'NEW_BLOG':\n      return state.concat(action.payload);\n    case 'ADD_LIKE':\n      {\n        // const id = action.payload.id\n        const updatedBlog = action.payload;\n        return state.map(n => n.id !== updatedBlog.id ? n : updatedBlog);\n      }\n    default:\n      return state;\n  }\n};\nexport const initializeBlogs = () => {\n  return async dispatch => {\n    const blogs = await blogService.getAll();\n    dispatch(setBlogs(blogs));\n  };\n};\nexport const updateLikes = id => {\n  return async dispatch => {\n    const toLikeBlog = await blogService.findOne(id);\n    const updatedBlog = {\n      ...toLikeBlog,\n      likes: toLikeBlog.likes + 1\n    };\n    await blogService.update(id, updatedBlog);\n    dispatch(addLike(updatedBlog));\n  };\n};\n// blogService.update(id, changedBlog).then((returnedBlog) => {\n//             setBlogs(\n//                 blogs.map((blog) => (blog.id !== id ? blog : returnedBlog))\n//             )\n//         })","map":{"version":3,"names":["blogService","addLike","setBlogs","blogReducer","state","action","type","payload","concat","updatedBlog","map","n","id","initializeBlogs","dispatch","blogs","getAll","updateLikes","toLikeBlog","findOne","likes","update"],"sources":["/Users/kulta/Code/FullstackOpenExercise/part7/Bloglist/bloglist-frontend/src/reducers/blogReducer.js"],"sourcesContent":["// const [blogs, setBlogs] = useState([])\n\nimport blogService from '../services/blogs'\nimport { addLike, setBlogs } from '../actions'\nexport const blogReducer = (state = [], action) => {\n    switch (action.type) {\n        case 'BLOGS':\n            return action.payload\n        case 'NEW_BLOG':\n            return state.concat(action.payload)\n        case 'ADD_LIKE': {\n            // const id = action.payload.id\n            const updatedBlog = action.payload\n            return state.map((n) => (n.id !== updatedBlog.id ? n : updatedBlog))\n        }\n        default:\n            return state\n    }\n}\n\nexport const initializeBlogs = () => {\n    return async (dispatch) => {\n        const blogs = await blogService.getAll()\n        dispatch(setBlogs(blogs))\n    }\n}\n\nexport const updateLikes = (id) => {\n    return async (dispatch) => {\n        const toLikeBlog = await blogService.findOne(id)\n        const updatedBlog = { ...toLikeBlog, likes: toLikeBlog.likes + 1 }\n        await blogService.update(id, updatedBlog)\n        dispatch(addLike(updatedBlog))\n    }\n}\n// blogService.update(id, changedBlog).then((returnedBlog) => {\n//             setBlogs(\n//                 blogs.map((blog) => (blog.id !== id ? blog : returnedBlog))\n//             )\n//         })\n"],"mappings":"AAAA;;AAEA,OAAOA,WAAW,MAAM,mBAAmB;AAC3C,SAASC,OAAO,EAAEC,QAAQ,QAAQ,YAAY;AAC9C,OAAO,MAAMC,WAAW,GAAG,YAAwB;EAAA,IAAvBC,KAAK,uEAAG,EAAE;EAAA,IAAEC,MAAM;EAC1C,QAAQA,MAAM,CAACC,IAAI;IACf,KAAK,OAAO;MACR,OAAOD,MAAM,CAACE,OAAO;IACzB,KAAK,UAAU;MACX,OAAOH,KAAK,CAACI,MAAM,CAACH,MAAM,CAACE,OAAO,CAAC;IACvC,KAAK,UAAU;MAAE;QACb;QACA,MAAME,WAAW,GAAGJ,MAAM,CAACE,OAAO;QAClC,OAAOH,KAAK,CAACM,GAAG,CAAEC,CAAC,IAAMA,CAAC,CAACC,EAAE,KAAKH,WAAW,CAACG,EAAE,GAAGD,CAAC,GAAGF,WAAY,CAAC;MACxE;IACA;MACI,OAAOL,KAAK;EAAA;AAExB,CAAC;AAED,OAAO,MAAMS,eAAe,GAAG,MAAM;EACjC,OAAO,MAAOC,QAAQ,IAAK;IACvB,MAAMC,KAAK,GAAG,MAAMf,WAAW,CAACgB,MAAM,EAAE;IACxCF,QAAQ,CAACZ,QAAQ,CAACa,KAAK,CAAC,CAAC;EAC7B,CAAC;AACL,CAAC;AAED,OAAO,MAAME,WAAW,GAAIL,EAAE,IAAK;EAC/B,OAAO,MAAOE,QAAQ,IAAK;IACvB,MAAMI,UAAU,GAAG,MAAMlB,WAAW,CAACmB,OAAO,CAACP,EAAE,CAAC;IAChD,MAAMH,WAAW,GAAG;MAAE,GAAGS,UAAU;MAAEE,KAAK,EAAEF,UAAU,CAACE,KAAK,GAAG;IAAE,CAAC;IAClE,MAAMpB,WAAW,CAACqB,MAAM,CAACT,EAAE,EAAEH,WAAW,CAAC;IACzCK,QAAQ,CAACb,OAAO,CAACQ,WAAW,CAAC,CAAC;EAClC,CAAC;AACL,CAAC;AACD;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}