{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport blogService from '../services/blogs';\nconst blogSlice = createSlice({\n  name: 'blogs',\n  initialState: [],\n  reducers: {\n    addLike(state, action) {\n      const changedBlog = action.payload;\n      return state.map(n => n.id !== changedBlog.id ? n : changedBlog);\n    },\n    appendBlog(state, action) {\n      state.push(action.payload);\n    },\n    setBlogs(state, action) {\n      return action.payload;\n    },\n    deleteBlog(state, action) {\n      const id = action.payload;\n      return state.filter(n => n.id !== id);\n    }\n  }\n});\nexport const {\n  addLike,\n  appendBlog,\n  setBlogs,\n  deleteBlog\n} = blogSlice.actions;\n\n// With Redux Thunk it is possible to implement action creators,\n// which return a function instead of an object.\n// The function receives Redux store's dispatch and getState methods as parameters.\nexport const initializeBlogs = () => {\n  return async dispatch => {\n    const blogs = await blogService.getAll();\n    dispatch(setBlogs(blogs));\n  };\n};\nexport const addNew = blogObject => {\n  return async dispatch => {\n    const newBlog = await blogService.createNew(blogObject);\n    dispatch(appendBlog(newBlog));\n  };\n};\nexport const moreLike = id => {\n  return async dispatch => {\n    const blogToLike = await blogService.findOne(id);\n    const updatedObj = {\n      ...blogToLike,\n      likes: blogToLike.likes + 1\n    };\n    await blogService.update(updatedObj);\n    dispatch(addLike(updatedObj));\n  };\n};\nexport const removeBlog = id => {\n  return async dispatch => {\n    const updateBlogs = await blogService.remove(id);\n    console.log('updateBlogs: ', updateBlogs);\n    dispatch(deleteBlog(id));\n  };\n};\nexport default blogSlice.reducer;","map":{"version":3,"names":["createSlice","blogService","blogSlice","name","initialState","reducers","addLike","state","action","changedBlog","payload","map","n","id","appendBlog","push","setBlogs","deleteBlog","filter","actions","initializeBlogs","dispatch","blogs","getAll","addNew","blogObject","newBlog","createNew","moreLike","blogToLike","findOne","updatedObj","likes","update","removeBlog","updateBlogs","remove","console","log","reducer"],"sources":["/Users/kulta/Code/FullstackOpenExercise/part7/Bloglist/bloglist-frontend/src/reducers/blogReducer.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\nimport blogService from '../services/blogs'\n\nconst blogSlice = createSlice({\n    name: 'blogs',\n    initialState: [],\n    reducers: {\n        addLike(state, action) {\n            const changedBlog = action.payload\n            return state.map((n) => (n.id !== changedBlog.id ? n : changedBlog))\n        },\n        appendBlog(state, action) {\n            state.push(action.payload)\n        },\n        setBlogs(state, action) {\n            return action.payload\n        },\n        deleteBlog(state, action) {\n            const id = action.payload\n            return state.filter((n) => n.id !== id)\n        },\n    },\n})\n\nexport const { addLike, appendBlog, setBlogs, deleteBlog } = blogSlice.actions\n\n// With Redux Thunk it is possible to implement action creators,\n// which return a function instead of an object.\n// The function receives Redux store's dispatch and getState methods as parameters.\nexport const initializeBlogs = () => {\n    return async (dispatch) => {\n        const blogs = await blogService.getAll()\n        dispatch(setBlogs(blogs))\n    }\n}\n\nexport const addNew = (blogObject) => {\n    return async (dispatch) => {\n        const newBlog = await blogService.createNew(blogObject)\n        dispatch(appendBlog(newBlog))\n    }\n}\n\nexport const moreLike = (id) => {\n    return async (dispatch) => {\n        const blogToLike = await blogService.findOne(id)\n        const updatedObj = { ...blogToLike, likes: blogToLike.likes + 1 }\n        await blogService.update(updatedObj)\n        dispatch(addLike(updatedObj))\n    }\n}\n\nexport const removeBlog = (id) => {\n    return async (dispatch) => {\n        const updateBlogs = await blogService.remove(id)\n        console.log('updateBlogs: ', updateBlogs)\n        dispatch(deleteBlog(id))\n    }\n}\n\nexport default blogSlice.reducer\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,WAAW,MAAM,mBAAmB;AAE3C,MAAMC,SAAS,GAAGF,WAAW,CAAC;EAC1BG,IAAI,EAAE,OAAO;EACbC,YAAY,EAAE,EAAE;EAChBC,QAAQ,EAAE;IACNC,OAAO,CAACC,KAAK,EAAEC,MAAM,EAAE;MACnB,MAAMC,WAAW,GAAGD,MAAM,CAACE,OAAO;MAClC,OAAOH,KAAK,CAACI,GAAG,CAAEC,CAAC,IAAMA,CAAC,CAACC,EAAE,KAAKJ,WAAW,CAACI,EAAE,GAAGD,CAAC,GAAGH,WAAY,CAAC;IACxE,CAAC;IACDK,UAAU,CAACP,KAAK,EAAEC,MAAM,EAAE;MACtBD,KAAK,CAACQ,IAAI,CAACP,MAAM,CAACE,OAAO,CAAC;IAC9B,CAAC;IACDM,QAAQ,CAACT,KAAK,EAAEC,MAAM,EAAE;MACpB,OAAOA,MAAM,CAACE,OAAO;IACzB,CAAC;IACDO,UAAU,CAACV,KAAK,EAAEC,MAAM,EAAE;MACtB,MAAMK,EAAE,GAAGL,MAAM,CAACE,OAAO;MACzB,OAAOH,KAAK,CAACW,MAAM,CAAEN,CAAC,IAAKA,CAAC,CAACC,EAAE,KAAKA,EAAE,CAAC;IAC3C;EACJ;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEP,OAAO;EAAEQ,UAAU;EAAEE,QAAQ;EAAEC;AAAW,CAAC,GAAGf,SAAS,CAACiB,OAAO;;AAE9E;AACA;AACA;AACA,OAAO,MAAMC,eAAe,GAAG,MAAM;EACjC,OAAO,MAAOC,QAAQ,IAAK;IACvB,MAAMC,KAAK,GAAG,MAAMrB,WAAW,CAACsB,MAAM,EAAE;IACxCF,QAAQ,CAACL,QAAQ,CAACM,KAAK,CAAC,CAAC;EAC7B,CAAC;AACL,CAAC;AAED,OAAO,MAAME,MAAM,GAAIC,UAAU,IAAK;EAClC,OAAO,MAAOJ,QAAQ,IAAK;IACvB,MAAMK,OAAO,GAAG,MAAMzB,WAAW,CAAC0B,SAAS,CAACF,UAAU,CAAC;IACvDJ,QAAQ,CAACP,UAAU,CAACY,OAAO,CAAC,CAAC;EACjC,CAAC;AACL,CAAC;AAED,OAAO,MAAME,QAAQ,GAAIf,EAAE,IAAK;EAC5B,OAAO,MAAOQ,QAAQ,IAAK;IACvB,MAAMQ,UAAU,GAAG,MAAM5B,WAAW,CAAC6B,OAAO,CAACjB,EAAE,CAAC;IAChD,MAAMkB,UAAU,GAAG;MAAE,GAAGF,UAAU;MAAEG,KAAK,EAAEH,UAAU,CAACG,KAAK,GAAG;IAAE,CAAC;IACjE,MAAM/B,WAAW,CAACgC,MAAM,CAACF,UAAU,CAAC;IACpCV,QAAQ,CAACf,OAAO,CAACyB,UAAU,CAAC,CAAC;EACjC,CAAC;AACL,CAAC;AAED,OAAO,MAAMG,UAAU,GAAIrB,EAAE,IAAK;EAC9B,OAAO,MAAOQ,QAAQ,IAAK;IACvB,MAAMc,WAAW,GAAG,MAAMlC,WAAW,CAACmC,MAAM,CAACvB,EAAE,CAAC;IAChDwB,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEH,WAAW,CAAC;IACzCd,QAAQ,CAACJ,UAAU,CAACJ,EAAE,CAAC,CAAC;EAC5B,CAAC;AACL,CAAC;AAED,eAAeX,SAAS,CAACqC,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}