{"ast":null,"code":"import blogService from '../services/blogs';\nimport { setBlogs } from '../actions';\n// import { createSlice } from '@reduxjs/toolkit'\n\nexport const blogReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case 'BLOGS':\n      return action.payload;\n    case 'NEW_BLOG':\n      return state.concat(action.payload);\n    case 'UPDATE_BLOG':\n      {\n        // const id = action.payload.id\n        const updatedBlog = action.payload;\n        return state.map(blog => blog.id !== id ? blog : updatedBlog);\n      }\n    default:\n      return state;\n  }\n};\nexport const initializeBlogs = () => {\n  return async dispatch => {\n    const blogs = await blogService.getAll();\n    dispatch(setBlogs(blogs));\n  };\n};\n\n// export const updateLikes = (id) => {\n//     return async (dispatch) => {\n//         const toLikeBlog = await blogService.findOne(id)\n//         const updatedBlog = { ...toLikeBlog, likes: toLikeBlog.likes + 1 }\n//         await blogService.update(updatedBlog)\n//         dispatch(updateLikeBlog(updatedBlog))\n//     }\n// }\n// blogService.update(id, changedBlog).then((returnedBlog) => {\n//             setBlogs(\n//                 blogs.map((blog) => (blog.id !== id ? blog : returnedBlog))\n//             )\n//         })","map":{"version":3,"names":["blogService","setBlogs","blogReducer","state","action","type","payload","concat","updatedBlog","map","blog","id","initializeBlogs","dispatch","blogs","getAll"],"sources":["/Users/kulta/Code/FullstackOpenExercise/part7/Bloglist/bloglist-frontend/src/reducers/blogReducer.js"],"sourcesContent":["import blogService from '../services/blogs'\nimport { setBlogs } from '../actions'\n// import { createSlice } from '@reduxjs/toolkit'\n\nexport const blogReducer = (state = [], action) => {\n    switch (action.type) {\n        case 'BLOGS':\n            return action.payload\n        case 'NEW_BLOG':\n            return state.concat(action.payload)\n        case 'UPDATE_BLOG': {\n            // const id = action.payload.id\n            const updatedBlog = action.payload\n            return state.map((blog) => (blog.id !== id ? blog : updatedBlog))\n        }\n        default:\n            return state\n    }\n}\n\nexport const initializeBlogs = () => {\n    return async (dispatch) => {\n        const blogs = await blogService.getAll()\n        dispatch(setBlogs(blogs))\n    }\n}\n\n// export const updateLikes = (id) => {\n//     return async (dispatch) => {\n//         const toLikeBlog = await blogService.findOne(id)\n//         const updatedBlog = { ...toLikeBlog, likes: toLikeBlog.likes + 1 }\n//         await blogService.update(updatedBlog)\n//         dispatch(updateLikeBlog(updatedBlog))\n//     }\n// }\n// blogService.update(id, changedBlog).then((returnedBlog) => {\n//             setBlogs(\n//                 blogs.map((blog) => (blog.id !== id ? blog : returnedBlog))\n//             )\n//         })\n"],"mappings":"AAAA,OAAOA,WAAW,MAAM,mBAAmB;AAC3C,SAASC,QAAQ,QAAQ,YAAY;AACrC;;AAEA,OAAO,MAAMC,WAAW,GAAG,YAAwB;EAAA,IAAvBC,KAAK,uEAAG,EAAE;EAAA,IAAEC,MAAM;EAC1C,QAAQA,MAAM,CAACC,IAAI;IACf,KAAK,OAAO;MACR,OAAOD,MAAM,CAACE,OAAO;IACzB,KAAK,UAAU;MACX,OAAOH,KAAK,CAACI,MAAM,CAACH,MAAM,CAACE,OAAO,CAAC;IACvC,KAAK,aAAa;MAAE;QAChB;QACA,MAAME,WAAW,GAAGJ,MAAM,CAACE,OAAO;QAClC,OAAOH,KAAK,CAACM,GAAG,CAAEC,IAAI,IAAMA,IAAI,CAACC,EAAE,KAAKA,EAAE,GAAGD,IAAI,GAAGF,WAAY,CAAC;MACrE;IACA;MACI,OAAOL,KAAK;EAAA;AAExB,CAAC;AAED,OAAO,MAAMS,eAAe,GAAG,MAAM;EACjC,OAAO,MAAOC,QAAQ,IAAK;IACvB,MAAMC,KAAK,GAAG,MAAMd,WAAW,CAACe,MAAM,EAAE;IACxCF,QAAQ,CAACZ,QAAQ,CAACa,KAAK,CAAC,CAAC;EAC7B,CAAC;AACL,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}