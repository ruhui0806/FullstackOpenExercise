{"ast":null,"code":"// export const setBlogs = (data) => {\n//     return { type: 'SET_BLOGS', payload: data }\n// }\n\n// export const appendBlog = (data) => {\n//     return { type: 'ADD_BLOG', payload: data }\n// }\n\n// export const updateLikeBlogs = (data) => {\n//     return { type: 'ADD_BLOG', payload: data }\n// }\n\n// const blogReducer = (state = [], action) => {\n//     switch (action.type) {\n//         case 'SET_BLOGS':\n//             return action.payload\n//         case 'ADD_BLOG':\n//             return state.concat(action.payload)\n//         case 'ADD_LIKE': {\n//             const id = action.payload\n//             const toLikeBlog = state.find((n) => n.id === id)\n//             const changedBlog = { ...toLikeBlog, likes: toLikeBlog.likes + 1 }\n//             return state.map((n) => (n.id !== changedBlog.id ? n : changedBlog))\n//         }\n//         default:\n//             return state\n//     }\n// }\n// export default blogReducer\n\n// //\n// import { createSlice } from '@reduxjs/toolkit'\n\n// const blogSlice = createSlice({\n//     name: 'blogReducer',\n//     initialState: [],\n//     reducers: {\n//         setBlogs(state, action) {\n//             return action.payload\n//         },\n//         appendBlog(state, action) {\n//             state.push(action.payload)\n//         },\n\n//     },\n// })\n\n// export const { setBlogs, appendBlog } = blogSlice.actions\n// export default blogSlice.reducer\n\n// import blogService from '../services/blogs'\n// export const initializeBlogs = () => {\n//     return async (dispatch) => {\n//         const blogs = await blogService.getAll()\n//         dispatch(setBlogs(blogs))\n//     }\n// }\n///////////\n\nimport { createSlice } from '@reduxjs/toolkit';\nimport anecdoteService from '../services/anecdoteService';\nconst blogSlice = createSlice({\n  name: 'blogs',\n  initialState: [],\n  reducers: {\n    addLike(state, action) {\n      const changedBlog = action.payload;\n      return state.map(n => n.id !== changedBlog.id ? n : changedBlog);\n    },\n    appendAnec(state, action) {\n      state.push(action.payload);\n    },\n    setBlogs(state, action) {\n      return action.payload;\n    }\n  }\n});\nexport const {\n  addLike,\n  appendAnec,\n  setBlogs,\n  findForVote\n} = blogSlice.actions;\n\n// With Redux Thunk it is possible to implement action creators,\n// which return a function instead of an object.\n// The function receives Redux store's dispatch and getState methods as parameters.\nexport const initializeAnecdotes = () => {\n  return async dispatch => {\n    const ancdotes = await anecdoteService.getAll();\n    dispatch(setAnec(ancdotes));\n  };\n};\nexport const addNew = input => {\n  return async dispatch => {\n    const newAnecdote = await anecdoteService.createNew(input);\n    dispatch(appendAnec(newAnecdote));\n  };\n};\nexport const updateVotes = id => {\n  return async dispatch => {\n    const anecToVote = await anecdoteService.findOne(id);\n    const updatedObj = {\n      ...anecToVote,\n      votes: anecToVote.votes + 1\n    };\n    await anecdoteService.update(updatedObj);\n    dispatch(addVote(updatedObj));\n  };\n};\nexport default anecdoteSlice.reducer;","map":{"version":3,"names":["createSlice","anecdoteService","blogSlice","name","initialState","reducers","addLike","state","action","changedBlog","payload","map","n","id","appendAnec","push","setBlogs","findForVote","actions","initializeAnecdotes","dispatch","ancdotes","getAll","setAnec","addNew","input","newAnecdote","createNew","updateVotes","anecToVote","findOne","updatedObj","votes","update","addVote","anecdoteSlice","reducer"],"sources":["/Users/kulta/Code/FullstackOpenExercise/part7/Bloglist/bloglist-frontend/src/reducers/blogReducer.js"],"sourcesContent":["// export const setBlogs = (data) => {\n//     return { type: 'SET_BLOGS', payload: data }\n// }\n\n// export const appendBlog = (data) => {\n//     return { type: 'ADD_BLOG', payload: data }\n// }\n\n// export const updateLikeBlogs = (data) => {\n//     return { type: 'ADD_BLOG', payload: data }\n// }\n\n// const blogReducer = (state = [], action) => {\n//     switch (action.type) {\n//         case 'SET_BLOGS':\n//             return action.payload\n//         case 'ADD_BLOG':\n//             return state.concat(action.payload)\n//         case 'ADD_LIKE': {\n//             const id = action.payload\n//             const toLikeBlog = state.find((n) => n.id === id)\n//             const changedBlog = { ...toLikeBlog, likes: toLikeBlog.likes + 1 }\n//             return state.map((n) => (n.id !== changedBlog.id ? n : changedBlog))\n//         }\n//         default:\n//             return state\n//     }\n// }\n// export default blogReducer\n\n// //\n// import { createSlice } from '@reduxjs/toolkit'\n\n// const blogSlice = createSlice({\n//     name: 'blogReducer',\n//     initialState: [],\n//     reducers: {\n//         setBlogs(state, action) {\n//             return action.payload\n//         },\n//         appendBlog(state, action) {\n//             state.push(action.payload)\n//         },\n\n//     },\n// })\n\n// export const { setBlogs, appendBlog } = blogSlice.actions\n// export default blogSlice.reducer\n\n// import blogService from '../services/blogs'\n// export const initializeBlogs = () => {\n//     return async (dispatch) => {\n//         const blogs = await blogService.getAll()\n//         dispatch(setBlogs(blogs))\n//     }\n// }\n///////////\n\nimport { createSlice } from '@reduxjs/toolkit'\nimport anecdoteService from '../services/anecdoteService'\n\nconst blogSlice = createSlice({\n    name: 'blogs',\n    initialState: [],\n    reducers: {\n        addLike(state, action) {\n            const changedBlog = action.payload\n\n            return state.map((n) => (n.id !== changedBlog.id ? n : changedBlog))\n        },\n        appendAnec(state, action) {\n            state.push(action.payload)\n        },\n        setBlogs(state, action) {\n            return action.payload\n        },\n    },\n})\n\nexport const { addLike, appendAnec, setBlogs, findForVote } = blogSlice.actions\n\n// With Redux Thunk it is possible to implement action creators,\n// which return a function instead of an object.\n// The function receives Redux store's dispatch and getState methods as parameters.\nexport const initializeAnecdotes = () => {\n    return async (dispatch) => {\n        const ancdotes = await anecdoteService.getAll()\n        dispatch(setAnec(ancdotes))\n    }\n}\n\nexport const addNew = (input) => {\n    return async (dispatch) => {\n        const newAnecdote = await anecdoteService.createNew(input)\n        dispatch(appendAnec(newAnecdote))\n    }\n}\n\nexport const updateVotes = (id) => {\n    return async (dispatch) => {\n        const anecToVote = await anecdoteService.findOne(id)\n        const updatedObj = { ...anecToVote, votes: anecToVote.votes + 1 }\n        await anecdoteService.update(updatedObj)\n        dispatch(addVote(updatedObj))\n    }\n}\n\nexport default anecdoteSlice.reducer\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,eAAe,MAAM,6BAA6B;AAEzD,MAAMC,SAAS,GAAGF,WAAW,CAAC;EAC1BG,IAAI,EAAE,OAAO;EACbC,YAAY,EAAE,EAAE;EAChBC,QAAQ,EAAE;IACNC,OAAO,CAACC,KAAK,EAAEC,MAAM,EAAE;MACnB,MAAMC,WAAW,GAAGD,MAAM,CAACE,OAAO;MAElC,OAAOH,KAAK,CAACI,GAAG,CAAEC,CAAC,IAAMA,CAAC,CAACC,EAAE,KAAKJ,WAAW,CAACI,EAAE,GAAGD,CAAC,GAAGH,WAAY,CAAC;IACxE,CAAC;IACDK,UAAU,CAACP,KAAK,EAAEC,MAAM,EAAE;MACtBD,KAAK,CAACQ,IAAI,CAACP,MAAM,CAACE,OAAO,CAAC;IAC9B,CAAC;IACDM,QAAQ,CAACT,KAAK,EAAEC,MAAM,EAAE;MACpB,OAAOA,MAAM,CAACE,OAAO;IACzB;EACJ;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEJ,OAAO;EAAEQ,UAAU;EAAEE,QAAQ;EAAEC;AAAY,CAAC,GAAGf,SAAS,CAACgB,OAAO;;AAE/E;AACA;AACA;AACA,OAAO,MAAMC,mBAAmB,GAAG,MAAM;EACrC,OAAO,MAAOC,QAAQ,IAAK;IACvB,MAAMC,QAAQ,GAAG,MAAMpB,eAAe,CAACqB,MAAM,EAAE;IAC/CF,QAAQ,CAACG,OAAO,CAACF,QAAQ,CAAC,CAAC;EAC/B,CAAC;AACL,CAAC;AAED,OAAO,MAAMG,MAAM,GAAIC,KAAK,IAAK;EAC7B,OAAO,MAAOL,QAAQ,IAAK;IACvB,MAAMM,WAAW,GAAG,MAAMzB,eAAe,CAAC0B,SAAS,CAACF,KAAK,CAAC;IAC1DL,QAAQ,CAACN,UAAU,CAACY,WAAW,CAAC,CAAC;EACrC,CAAC;AACL,CAAC;AAED,OAAO,MAAME,WAAW,GAAIf,EAAE,IAAK;EAC/B,OAAO,MAAOO,QAAQ,IAAK;IACvB,MAAMS,UAAU,GAAG,MAAM5B,eAAe,CAAC6B,OAAO,CAACjB,EAAE,CAAC;IACpD,MAAMkB,UAAU,GAAG;MAAE,GAAGF,UAAU;MAAEG,KAAK,EAAEH,UAAU,CAACG,KAAK,GAAG;IAAE,CAAC;IACjE,MAAM/B,eAAe,CAACgC,MAAM,CAACF,UAAU,CAAC;IACxCX,QAAQ,CAACc,OAAO,CAACH,UAAU,CAAC,CAAC;EACjC,CAAC;AACL,CAAC;AAED,eAAeI,aAAa,CAACC,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}